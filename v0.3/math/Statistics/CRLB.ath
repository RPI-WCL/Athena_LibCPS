#-------------------------------------------------------------------------
# Lines beginning with '#+-' are used to create the hierarchy graph
#+- Cramer-Rao Lower Bound

load "Athena_LibDDDAS/math/Statistics/Estimator.ath"
load "Athena_LibDDDAS/math/Function/Derivative.ath"
load "Athena_LibDDDAS/math/Function/Logarithm.ath"
load "Athena_LibDDDAS/math/Random/Random.ath"
load "Athena_LibDDDAS/math/RealExt/RealExt.ath"


#-- The proof in this module closely follows the proof of the Cramer-Rao Lower Bound
#-- given in http://gregorygundersen.com/blog/2019/11/27/proof-crlb/

#**** Only the highest-level derivation has been proven. 
#**** The proof of all intermediate results have been forced.  
#**** These must be proven in the future from more fundamental theory.

module CRLB { 


	#-------------------------  RELEVANT DOMAINS -------------------------  


	#------------------------  RELEVANT FUNCTIONS ------------------------  


	#------------------------  RELEVANT VARIABLES ------------------------  

	define [theta X] := [?theta:Real ?X:Vector.VectRandom]

	define [W Y] := [?W:Random.RandVar ?Y:Random.RandVar]

	#-------------------------  RELEVANT THEORY  -------------------------

	#-- Some intermediate properties needed for the proof of CRLB

	#-- A Property of Covariance (Eq 2)

	define Cov_Prod_Property :=
	(forall W Y .
		( (RealExt.pow (Random.cov W Y) 2)
		  <=	
		  (* (Random.var W) (Random.var Y))
	    )	
	) 

	#-- forcing the proof for now
	conclude Cov_Prod_Property
		(!force Cov_Prod_Property)



	#-- Value of covariance of T(X) and d/d_theta log f(X,theta) (Eq 5)

	define Cov_val_TX_DiffLogFXTheta := 
	(forall theta X .
		(= (Random.cov (Estimator.estOut (Estimator.consEst (Model.consMod theta X))) (Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta))	
           (Derivative.parDif 
					(Random.expected 
						(Estimator.estOut (Estimator.consEst (Model.consMod theta X)))) theta)
		)
	)

	#-- forcing the proof for now
	conclude Cov_val_TX_DiffLogFXTheta
		(!force Cov_val_TX_DiffLogFXTheta)



	#-- Value of variance of d/d_theta log f(X,theta) (Eq 6)

	define Var_val_DiffLogFXTheta := 
	(forall theta X .
		(= 
			(Random.var (Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta))

		    (Random.expected (Random.pow 
		  	  					  (Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta)
  								   2)
		    )
		)
	)

	#-- forcing the proof for now
	conclude Var_val_DiffLogFXTheta
		(!force Var_val_DiffLogFXTheta)



	#-- Covariance Inequality Expression (d/d_theta E[T(X)])^2 <= V[T(X)] * E[d/d_theta log f(X,theta)^2]	

	define Covariance-Inequality-THEOREM :=
	(forall theta X .
		(not                # the denominator cannot be 0
			(= 
			  (Random.expected (Random.pow 
			  						(Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta)
			  						2)
			  )
			  0.0				
			)
		)
		==>
			(   (RealExt.pow 
		           (Derivative.parDif 
							(Random.expected 
								(Estimator.estOut (Estimator.consEst (Model.consMod theta X)))) theta)
		            2)

				<=

				 ( (Random.var (Estimator.estOut (Estimator.consEst (Model.consMod theta X))))
				 	*
				    (Random.expected (Random.pow 
				  	  					  (Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta)
		  								   2)
				    )
			 	 )
			)
	)

	conclude Covariance-Inequality-THEOREM
	pick-any theta
	pick-any X
	assume (not                # the denominator cannot be 0
				(= 
				  (Random.expected (Random.pow 
				  						(Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta)
				  						2)
				  )
				  0.0				
				)
			)
	let{
		W := (Estimator.estOut (Estimator.consEst (Model.consMod theta X)));
		Y := (Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta);
	    V_Y_not_zero := (not                # the denominator cannot be 0
							(= 
							  (Random.expected (Random.pow 
							  						(Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta)
							  						2)
							  )
							  0.0				
							)
						);		
		conn-2-Cov_Prod_Property := (!uspec (!uspec Cov_Prod_Property W) Y); # Cov(W,Y)^2 <= V[W]V[Y]
		conn-2-Cov_val_TX_DiffLogFXTheta := (!uspec (!uspec Cov_val_TX_DiffLogFXTheta theta) X); # Cov[W,Y] = d/d_theta E[T(X)]
		conn-2-Var_val_DiffLogFXTheta := (!uspec (!uspec Var_val_DiffLogFXTheta theta) X); # V[Y] = E[d/d_theta log f(X,theta)^2]
		r1 := (Random.cov (Estimator.estOut (Estimator.consEst (Model.consMod theta X))) (Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta));
		r2 := (Random.var W);
		r3 := (Random.var Y);
		r1e := (Derivative.parDif 
						(Random.expected 
							(Estimator.estOut (Estimator.consEst (Model.consMod theta X)))) theta);													
		r3e := (Random.expected (Random.pow 
			  	  					  (Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta)
	  								   2)
			   );													
		antecedent := (!both conn-2-Cov_Prod_Property (!both  conn-2-Cov_val_TX_DiffLogFXTheta conn-2-Var_val_DiffLogFXTheta ));
		conn-2-THEOREM-replace-with-equal2 := (!uspec (!uspec (!uspec (!uspec (!uspec RealExt.THEOREM-replace-with-equal2 r1) r2) r3) r1e) r3e) 
	}	
	(!mp conn-2-THEOREM-replace-with-equal2 antecedent)


	#-- The Cramer-Rao Lower Bound (Eq 7)

	define CRLB-Theorem :=
	(forall theta X .
		(not                # the denominator cannot be 0
			(= 
			  (Random.expected (Random.pow 
			  						(Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta)
			  						2)
			  )
			  0.0				
			)
		)
		==>
		(
			( (RealExt.pow 
				(Derivative.parDif 
					(Random.expected 
						(Estimator.estOut (Estimator.consEst (Model.consMod theta X)))) theta) 
			    2) 
			  / 
			  (Random.expected (Random.pow 
			  						(Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta)
			  						2)
			  )
		    )

			<=

			(Random.var (Estimator.estOut (Estimator.consEst (Model.consMod theta X))))
		)
	)

	#-- Proof of CRLB-Theorem
	#-- Strategy:
	#-- 	1. Cov[W,Y]^2 <= V[W]V[Y]
	#-- 	2. d/d_theta E[T(X)] ^ 2 <= V[W]V[Y] # replaced value of Cov[W,Y] in 1
	#-- 	3. (d/d_theta E[T(X)] ^ 2) / V[Y] <= V[W] # swapped sides in inequality 
	#-- 	4. replace values of V[W] and V[Y] in 3 

	conclude CRLB-Theorem
	pick-any theta
	pick-any X
	assume (not                # the denominator cannot be 0
				(= 
				  (Random.expected (Random.pow 
				  						(Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta)
				  						2)
				  )
				  0.0				
				)
			)
	let{
		W := (Estimator.estOut (Estimator.consEst (Model.consMod theta X)));
		Y := (Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta);
	    V_Y_not_zero := (not                # the denominator cannot be 0
							(= 
							  (Random.expected (Random.pow 
							  						(Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta)
							  						2)
							  )
							  0.0				
							)
						);		
		conn-2-Covariance-Inequality-THEOREM := (!uspec (!uspec Covariance-Inequality-THEOREM theta) X);
		cov-inequality-expression := (!mp conn-2-Covariance-Inequality-THEOREM V_Y_not_zero);
	r1 := (RealExt.pow 
			(Derivative.parDif 
				(Random.expected 
					(Estimator.estOut (Estimator.consEst (Model.consMod theta X)))) theta) 
		    2);	
	r2 := (Random.var (Estimator.estOut (Estimator.consEst (Model.consMod theta X))));
	r3 := (Random.expected (Random.pow 
		  	  					  (Derivative.parDifLog (Logarithm.ln (Vector.jointDen X theta)) theta)
  								   2)
		  );
    conn-2-swap-sides-axiom := (!uspec (!uspec (!uspec RealExt.swap-sides-axiom r1) r2) r3);
    cov<=VXVY-implies-cov_by_VY=<=VX := (!mp conn-2-swap-sides-axiom V_Y_not_zero)
	}	
	(!mp cov<=VXVY-implies-cov_by_VY=<=VX cov-inequality-expression)


}# end module
