#-------------------------------------------------------------------------
# Lines beginning with '#+-' are used to create the hierarchy graph
#+- Normal Distributions

load "Athena_LibDDDAS/math/Dist/Dist.ath"
load "Athena_LibDDDAS/math/Random/Random.ath"
load "Athena_LibDDDAS/math/RealExt/RealExt.ath"

extend-module Dist { 


	#--------------------- Below Developed By Sam Breese ---------------------

	#-- normal-cf-forward states that if x is a normal distribution, then its CF can be expressed by using its real mean and var
	# Sam Breese

	(define normal-cf-forward
	  (forall ?x:Dist
	    (if (is-norm ?x:Dist)
	        (= (charFun ?x:Dist)
	           (CharFun.NormalCF (mean ?x:Dist) (var ?x:Dist))))))

	#-- normal-cf-backward states that if the CF of a distribution are expressed using its real mean and var, then it is a normal distribution
	# Sam Breese
	
	(define normal-cf-backward
	  (forall ?x:Dist
	    (if (= (charFun ?x:Dist)
	           (CharFun.NormalCF (mean ?x:Dist) (var ?x:Dist)))
	        (is-norm ?x:Dist))))

	#-- normal-cf-mean-var states that if the CF of a distribution is expressed using reals, then the mean and var can be extracted from it  ????????????????? --- how do you claim this? 
	# Sam Breese
	
	(define normal-cf-mean-var
	  (forall ?x:Dist
	    (forall ?m:Real
	      (forall ?v:Real
	        (if (= (charFun ?x:Dist)
	               (CharFun.NormalCF ?m:Real ?v:Real))
	            (and (= (mean ?x:Dist) ?m:Real)
	                 (= (var ?x:Dist) ?v:Real)))))))

	(assert normal-cf-forward)
	(assert normal-cf-backward)
	(assert normal-cf-mean-var)

	#-- normal-cf-sum states that the CF of the convoof xCramersy distributions can be obtained by the linear combination of the CFs of the xCramersy distributions
	# Sam Breese
	
	(define normal-cf-sum
	  (forall ?x:Dist
	    (forall ?y:Dist
	      (if (and (is-norm ?x:Dist) (is-norm ?y:Dist))
	          (= (charFun (convo ?x:Dist ?y:Dist))
	             (CharFun.mul-cf (charFun ?x:Dist) (charFun ?y:Dist)))))))
	(assert normal-cf-sum)
	#---------------------End Developed By Sam Breese ---------------------



	module Norm {
		#-------------------------  RELEVANT DOMAINS -------------------------  



		#------------------------  RELEVANT FUNCTIONS ------------------------  

		#-- An integral function that computes the real integral of cumulative distribution function of a standard normal distribution by taking the real z-score as input (undefined for now)

		declare integral-SND : [Real] -> Real

		#-- A function that computes the z-score of a value T wrt a normal distribution Z. It returns zero if the distribution is not normal.

		declare z-score : [Real Dist.Dist] -> Real

		#------------------------  RELEVANT VARIABLES ------------------------  

		define [t T] := [?t:Real ?T:Real]

		define [X Y Z] := [?X:Dist ?Y:Dist ?Z:Dist]

		#-------------------------  RELEVANT THEORY  -------------------------


		#-- z-score-axioms defines the z-score function

		assert z-score-axioms :=
		   let{
		        mean := (Dist.mean Z);
		       stdev := (RealExt.sqrt (Dist.var Z));
		      compute := (/ (- T mean) stdev)
		      }
		(fun
		[(z-score T Z) =
		  [ 0.0 when (~(Dist.is-norm Z))
		    compute when (Dist.is-norm Z)
		  ]  
		]) 

		define [z-score-Z-not-normal z-score-result] := z-score-axioms

		#-- probability-Dist<=c-axioms states that
		#  the probability that a distribution
		#  will take a value at most c is
		#  0.0 if it is not normal
	    #  and the integral of Standard Normal Distribution
	    #  if it is normal 

		assert probability-Dist<=c-axioms :=
		   let{
		       score := (z-score T Z);
		       integral := (integral-SND score)
		   }
		(fun
		[(probability-Dist<=c Z T) =
		   [ 0.0 when (~(Dist.is-norm Z))
		     integral when (Dist.is-norm Z)
		   ]
		])  

		define [probability-Dist<=c-ZNotNorm probability-Dist<=c-ZNorm] := probability-Dist<=c-axioms

	#--------------------- Below Developed By Sam Breese ---------------------
		#-- CramÃ©r's Decomposition Theoremtheorem
	# ****************************************************************
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	#-- MAYBE WRONG SINCE IT DOES NOT CHECK IF x and y are independent
	# ****************************************************************
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		(define THEOREM-Cramers-Decomposition
		  (forall ?x:Dist 
		    (forall ?y:Dist
		      (if (and (is-norm ?x:Dist) (is-norm ?y:Dist))
		          (is-norm (convo ?x:Dist ?y:Dist))))))


		conclude THEOREM-Cramers-Decomposition
		pick-any x:Dist
		pick-any y:Dist
		assume (and (is-norm x) (is-norm y))
		(!mp
		 (!uspec normal-cf-backward (convo x y))
		 let {px := (!mp (!uspec normal-cf-forward x) (is-norm x));
		      py := (!mp (!uspec normal-cf-forward y) (is-norm y));
		      ncs := (!mp (!uspec (!uspec normal-cf-sum x) y) (and (is-norm x) (is-norm y)));
		      mcn := (!uspec (!uspec (!uspec (!uspec CharFun.mul-cf-normal (mean x)) (var x)) (mean y)) (var y));
		      cmv := (!uspec (!uspec (!uspec normal-cf-mean-var (convo x y)) (+ (mean x) (mean y))) (+ (var x) (var y)))}
		   let {amv := (!mp 
		                 cmv
		                 (!chain [(charFun (convo x y))
		                          = (CharFun.mul-cf (charFun x) (charFun y)) [ncs]
		                          = (CharFun.mul-cf (CharFun.NormalCF (mean x) (var x)) (charFun y)) [px]
		                          = (CharFun.mul-cf (CharFun.NormalCF (mean x) (var x)) (CharFun.NormalCF (mean y) (var y))) [py]
		                          = (CharFun.NormalCF (+ (mean x) (mean y)) (+ (var x) (var y))) [mcn]
		                          ]))}
		   (!chain [(charFun (convo x y))
		            = (CharFun.mul-cf (charFun x) (charFun y)) [ncs]
		            = (CharFun.mul-cf (CharFun.NormalCF (mean x) (var x)) (charFun y)) [px]
		            = (CharFun.mul-cf (CharFun.NormalCF (mean x) (var x)) (CharFun.NormalCF (mean y) (var y))) [py]
		            = (CharFun.NormalCF (+ (mean x) (mean y)) (+ (var x) (var y))) [mcn]
		            = (CharFun.NormalCF (mean (convo x y)) (+ (var x) (var y))) [(!left-and amv)]
		            = (CharFun.NormalCF (mean (convo x y)) (var (convo x y))) [(!right-and amv)]
		            ]))
	#---------------------End Developed By Sam Breese ---------------------


		#-- THEOREM-probability-Conv2NormDist<=c states that if two 
		#   distributions X and Y are normal, then the probability that a 
		#   random variable that lies in the convolution of X and Y will be 
		#   at most some real T will be the integral of the SND upto the 
		#   z score of T wrt the convolution of X and Y

		define THEOREM-probability-Conv2NormDist<=c :=
		(
		forall X Y T .  
		(
		    (and (Dist.is-norm X) (Dist.is-norm Y) ) ==>
		    (= (probability-Dist<=c (Dist.convo X Y) T)
		       (integral-SND (z-score T (Dist.convo X Y) ) ) )
		)
		)

		conclude THEOREM-probability-Conv2NormDist<=c
		pick-any x:Dist.Dist
		pick-any y:Dist.Dist
		pick-any t:Real
		assume (and (Dist.is-norm x) (Dist.is-norm y))
		let{
		    xyNormal := (and (Dist.is-norm x) (Dist.is-norm y)); 
			xyCramers := (!uspec (!uspec THEOREM-Cramers-Decomposition x) y);
			xPlusyNormal := (!mp xyCramers xyNormal);
			txPlusyProbability := (!uspec (!uspec probability-Dist<=c-ZNorm t) (Dist.convo x y) )
		}
		(!mp txPlusyProbability xPlusyNormal) 



		#-- THEOREM-probability-Sum2NormRandom.RandVars<=c states that 
		#   the probability of the sum of two normally distributed random 
		#   variables x and y being at most a given real T is equal to the 
		#   integral of the SND upto the z-score of T wrt the convolution 
		#   of the Random.pdfs of x and y

		define THEOREM-probability-Sum2NormRandVars<=c :=
		(
		forall x y T .
		  (and (Dist.is-norm (Random.pdf x))
		       (Dist.is-norm (Random.pdf y)) ) 
		         ==> 
		            (= (Random.probability-RandVar<=c (Random.sum x y) T) 
		               (integral-SND (z-score T (Dist.convo (Random.pdf x) (Random.pdf y) ) ) ) )
		)


		conclude THEOREM-probability-Sum2NormRandVars<=c
		pick-any x:Random.RandVar
		pick-any y:Random.RandVar
		pick-any T:Real
		assume  (and (Dist.is-norm (Random.pdf x))
		             (Dist.is-norm (Random.pdf y)) )
		let{
		    xPDF := (Random.pdf x);
		    yPDF := (Random.pdf y);
		    xyPDFnormal := (and  (Dist.is-norm xPDF) (Dist.is-norm yPDF) );
		    convolutionxyPDF := (Dist.convo xPDF yPDF);
		    z := (Random.sum x y);
		    xySumRandVars := (!uspec (!uspec Random.sum-randVars x) y);
		    zPDF := (Random.pdf z);
		    zPDFConvolution := (!chain [ (Random.pdf z)
		                              =  (Random.pdf (Random.sum x y))  [z]
		                              =  convolutionxyPDF [xySumRandVars]
		                               ]);
		    probthm1 := (!uspec (!uspec (!uspec THEOREM-probability-Conv2NormDist<=c xPDF) yPDF) T);                        
		    probthm1result := (!mp probthm1 xyPDFnormal)     
		 }
		(!chain [ (Random.probability-RandVar<=c (Random.sum x y) T)
		        = (Dist.probability-Dist<=c (Random.pdf (Random.sum x y) ) T) [Random.probability-RandVar<=c-axiom]
		        = (Dist.probability-Dist<=c (Random.pdf z) T)          [z]
		        = (Dist.probability-Dist<=c convolutionxyPDF T) [zPDFConvolution]
		        = (Dist.probability-Dist<=c (Dist.convo xPDF yPDF) T) [convolutionxyPDF]
		        = (integral-SND (z-score T (Dist.convo (Random.pdf x) (Random.pdf y) ) ) ) [probthm1result]
		        ]
		)

	} # end of Norm


}# end Dist
